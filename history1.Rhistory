help(pdf)
d <- read.table(paste(workdir,'/',x,sep=''), header=TRUE) # sep="\t",
source(/home/jm/eclipseWS3.3/py7/HL7parser/PDFgen.R)
source("/home/jm/eclipseWS3.3/py7/HL7parser/PDFgen.R")
source("/home/jm/eclipseWS3.3/py7/HL7parser/PDFgen.R")
source("/home/jm/eclipseWS3.3/py7/HL7parser/PDFgen.R")
source("/home/jm/eclipseWS3.3/py7/HL7parser/PDFgen.R")
help(Sweave)
help("Sweave", package="utils")
??odfSweave
help(odfSweave)
help("odfSweave", package="utils")
library(odfWeave)
help(library)
library("odfWeave")
demoFile <- system.file("examples", "examples.odt", package = "odfWeave")
demoFile
system.file("examples", "examples.odt", package = "odfWeave")
exit
q()
exit
q()
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-1.0")
exit
whereis R
q()
q()
summary(t)
names(t)
t
names
names()
ls
ls()
t <- read.table("/home/jm/workspace_topcoders/HMS2/res/OCT/M2LEOCT",
header=FALSE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
summary(t)
image(t)
image(t$V1,t$V2,t$V3)
t=sort(t,t$V1)
SciViewsPackages <- c("SciViews", "svMisc", "svSocket", "svGUI", "svIDE",
"svDialogs", "svSweave", "svTools", "svUnit", "svWidgets", "tcltk2")
install.packages(SciViewsPackages)
library(svDialogs)
q()
q()
packages()
libraries()
install.packages(SciViewsPackages)
q()
install.packages("rj", repos="http://download.walware.de/rj-0.5")
install.packages("rj", repos="http://download.walware.de/rj-1.1")
q()
a=c(1,2,3,4,3,2)
a
subset(a,>2)
a
b=subset(a,>2)
a
b
b=subset(a,$1>2)
b
a
a[$1]
a[$1,]
a[1]
a[,1]
a[1,]
a[1]
a[,]
a[1.]
a
subset(a,1==2)
subset(a,$1==2)
a
subset(a,a$1==2)
a
subset(a,a$V1==2)
a
b=subset(a,a$V1==2)
b
summary(t)
subset(t,t$V3 < 50)
b=subset(t,t$V3 < 50)
b
b=subset(t,t$V3 < 50)
q()
t <- read.table("/home/jm/workspace_topcoders/HMS2/res/OCT/M2LEOCT",
header=FALSE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
t <- read.table("/home/jm/workspace_topcoders/HMS2/glm.txt", header=true, sep="", na.strings="NA", dec=".", strip.white=TRUE)
t <- read.table("/home/jm/workspace_topcoders/HMS2/glm.txt", header=true, sep="", na.strings="NA", dec=".", strip.white=true)
t <- read.table("/home/jm/workspace_topcoders/HMS2/glm.txt", header="true", sep="", na.strings="NA", dec=".", strip.white="true")
t <- read.table("/home/jm/workspace_topcoders/HMS2/glm.txt", header="true", sep="", na.strings="NA", dec=".", strip.white=TRUE)
t <- read.table("/home/jm/workspace_topcoders/HMS2/glm.txt", header=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
t <- read.table("/home/jm/workspace_topcoders/HMS2/glm.txt", header=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
t
summary(t)
names(t)
glm
help(glm)
help(anova)
help(glm)
help(glm)
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
print(d.AD <- data.frame(treatment, outcome, counts))
glm.D93 <- glm(counts ~ outcome + treatment, family=poisson())
anova(glm.D93)
summary(glm.D93)
help(gl)
g1 = glm(actual~case+ID+raw1)
g1 = glm(t$actual~t$case+t$ID+t$raw1)
g1
anova(g1)
summary(g1)
g2 = glm(t$actual~t$case+t$ID+t$raw2)
anova(g2)
g3 = glm(t$actual~t$case+t$ID+t$raw3)
anova(g2)
anova(g3)
anova(g1)
g3 = glm(t$actual~t$ID+t$raw3)
anova(g3)
g1 = glm(t$actual~t$ID+t$raw1)
anova(g1)
g2 = glm(t$actual~t$ID+t$raw2)
ANOVA(g2)
anova(g3)
summary(g3)
summary(g2)
summary(g3)
summary(g2)
summary(g1)
summary(g3)
summary(g2)
summary(g1)
help(anova)
help(coefficient)
help(coefficients)
help(coefficients)
coef(g2)
coef(g1)
coef(lm(t$actual~ID))
coef(lm(t$actual~ID)))
coef(lm(t$actual~t$ID)))
coef(lm(t$actual~t$ID))
coef(lm(t$actual~t$ID+t$raw3))
coef(glm(t$actual~t$ID+t$raw3))
coef(glm(t$actual~t$ID+t$raw1))
coef(glm(t$actual~t$ID+t$raw2))
coef(glm(t$actual~t$ID+t$raw3))
help(cv)
??cv
lm (formula = actual ~ raw1 + ID, data = t)
summary(lm (formula = actual ~ raw1 + ID, data = t))
summary(lm (formula = raw2 ~ actual + ID, data = t))
summary(lm (formula = ID ~ actual + raw2, data = t))
plot.lm(g1)
plot(lm(lm (formula = ID ~ actual + raw2, data = t))
plot.lm(lm (formula = ID ~ actual + raw2, data = t))
mean(t$raw2~t$actual)
summary(t$raw2~t$actual)
factor(t$raw2~t$actual)
subset(t$raw2, t$ID=0)
subset(t$raw2, t$ID==0)
mean(subset(t$raw2, t$ID==0))
mean(subset(t$raw1, t$ID==0))
mean(subset(t$raw3, t$ID==0))
mean(subset(t$raw4, t$ID==0))
mean(subset(t$raw3, t$ID))
mean(subset(t$raw3, t$ID))
help()
help(split)
split(t$raw2,t$ID)
split(t$raw2,t$ID).mean
split(t$raw2,t$ID).mean()
summary(split(t$raw2,t$ID))
split(t$raw2,t$ID)
lapply(split(t$raw2,t$ID),mean)
split(t$raw2,t$ID)
lapply(split(t$raw2,t$ID),mean)
sapply(split(t$raw2,t$ID),mean)
mean(subset(t$raw2,t$ID==0))
mean(subset(t$raw2,t$ID==33))
sapply(split(t$raw3,t$ID),mean)
m3=sapply(split(t$raw3,t$ID),mean)
m2=sapply(split(t$raw2,t$ID),mean)
d1=m3-subset(t$raw3, case="M17LE")
d1=m3-subset(t$raw3, t$case="M17LE")
d1=m3-subset(t$raw3, t$case=="M17LE")
d1
d1=subset(t$raw3, t$case=="M17LE")-m3
d2=subset(t$raw2, t$case=="M17LE")-m2
d2
r=subset(t$actual, t$case=="M17LE")
r
d1
d2
r=subset(t$actual, t$case=="M17LE")
c(r,d1,d2)
cbind(r,d1,d2)
rbind(r,d1,d2)
cbind(r,d1,d2)
cbind(r,d1/10,d2/10)
m3=sapply(split(t$raw3,t$ID),mean)
m3
m2
m1
m1=sapply(split(t$raw1,t$ID),mean)
m1
d2=subset(t$raw1, t$case=="M17LE")-m1
d1=subset(t$raw1, t$case=="M17LE")-m1
d2=abs(subset(t$raw2, t$case=="M17LE")-m2
d3=subset(t$raw3, t$case=="M17LE")-m3
cbind(r,d1/10,d2/10,d3/10)
d2
sd1=sapply(split(t$raw1,t$ID),stddev)
sd
sd(c(1,2,3))
help(sd)
sd1=sapply(split(t$raw1,t$ID),sd)
sd2=sapply(split(t$raw2,t$ID),sd)
sd1=sapply(split(t$raw3,t$ID),sd)
d1=(subset(t$raw1, t$case=="M17LE")-m1)/sd1
d2=(subset(t$raw2, t$case=="M17LE")-m2)/sd2
d3=(subset(t$raw3, t$case=="M17LE")-m3)/sd3
sd1=sapply(split(t$raw1,t$ID),sd)
d1=(subset(t$raw1, t$case=="M17LE")-m1)/sd1
sd3=sapply(split(t$raw3,t$ID),sd)
d3=(subset(t$raw3, t$case=="M17LE")-m3)/sd3
d2=(subset(t$raw2, t$case=="M17LE")-m2)/sd2
sd2=sapply(split(t$raw2,t$ID),sd)
d2=(subset(t$raw2, t$case=="M17LE")-m2)/sd2
cbind(r,d1/10,d2/10,d3/10)
cbind(r,d1,d2,d3)
cbind(r,d1*10,d2*10,d3*10)
d2=subset(t$raw2, t$case=="M17LE")-m2
d2
print (d2)
cat (d2)
cat (d2,jm2)
cat (d2,"jm2")
q()
d2
cat (d2,file="d2")
cat (d3,file="d3")
q()
write.table(d2,"d2.txt")
write.csv(d2,"d2.csv")
q()
d2
cbind(t$ID, m1)
m1
cbind(m1,m2,m3,sd1,sd2,sd3)
write.table(cbind(m1,m2,m3,sd1,sd2,sd3),file="msd.txt")
q()
write.table(cbind(m1,m2,m3,sd1,sd2,sd3),file="msd.txt",quote=FALSE, sep=",")
q()
neuralnet
307.68124363797216144.9798972302998
307.68124363797216144.9798972302998
AND <- c(rep(0,7),1)
OR <- c(0,rep(1,7))
binary.data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
AND
OR
binary.data
install(neuralnet)\
install(neuralnet)
library(neuralnet)
package(neuralnet)
t
factor(t$raw2~t$actual)
q()
t$raw2
mean(t$raw2)
sum(t$raw2)/len(t$raw2)
sum(t$raw2)/length(t$raw2)
gm_mean = function(a){prod(a)^(1/length(a))}
gmean=function(x){exp(mean(log(x)))}
gmean(t$raw2)
gm_mean(t$raw2)
prod(t$raw1)^(1/length(t$raw1))
prod(t$raw1)
t$raw1
prod(t$raw1)
prod(t$raw2)
prod(t$raw3)
help(prod)
mean(log(t$raw1))
mean(log(t$raw2))
mean(log(t$raw3))
exp(mean(log(t$raw1)))
gmean(1:10)
gm_mean(1:10)
gm_mean(t$raw1)
gmean(t$raw1)
mean(t$raw1)
gmean(t$actual)
gm_mean(t$actual)
mean(t$actual)
q()
q()
?rnorm
rnorm
rnorm(100,100)
dnorm(100,100)
pnorm(100,100)
qnorm(100,100)
help(rnorm)
help("rnorm")
help("rnorm")help.search(norm)
help("rnorm")help.search("norm")
help.search("norm")
help.search(norm)
example(rnorm)
demo()
apropos(norm)
apropos("norm")
vignette("name")
vignette("rnorm")
vignette(rnorm)
vignette("help")
vignette("cox")
help("logrank")
??logrank
>survey
?survey
help("survey")
??survey
h=rnorm(10,50,30)
h
plot(h)
plot(rnorm(100,50,30))
plot(c(rnorm(100,50,30))
plot(c(rnorm(100,50,30))
histo(rnorm(100,50,30)
)
histo(rnorm(100,50,30))
hist(rnorm(100,50,30))
fnorm(10,50,30)
dnorm(10,50,30)
dnorm(10,50,30,True)
dnorm(10,50,30,T)
dnorm(10,50,30,T)
?seq
seq(-5,5,10)
seq(from=-5,to=5,10)
seq(from=-5,to=5,lenght10)
seq(from=-5,to=5,lenght=10)
dnorm(seq(from=-5,to=5,lenght=10))
dnorm(seq(from=-5,to=5,lenght=10),mean=0)
dnorm(seq(from=-5,to=5,lenght=10),mean=0,var=1)
dnorm(seq(from=-5,to=5,lenght=10),mean=0,sd=1)
dnorm(seq(from=-5,to=5,lenght=10),mean=100,sd=1)
dnorm(seq(from=-5,to=5,lenght=10),mean=10,sd=1)
dnorm(seq(from=-5,to=5,lenght=10),mean=0,sd=1)
round(dnorm(seq(from=-5,to=5,lenght=10),mean=0,sd=1),2)
plot(round(dnorm(seq(from=-5,to=5,lenght=10),mean=0,sd=1),2))
hist(round(dnorm(seq(from=-5,to=5,lenght=10),mean=0,sd=1),2))
plot(round(dnorm(seq(from=-5,to=5,lenght=10),mean=0,sd=1),2))
hist(rnorm(100,mean=0,sd=1))
plot(round(dnorm(seq(from=-5,to=5,lenght=100),mean=0,sd=1),2))
s=seq(from=-5,to=5,lenght=100)
plot(round(dnorm(s,mean=0,sd=1),2))
s
seq(10)
seq(0,10)
?sample
p=c()
?set
?set.seed
?c
?seq
c(5,4,1,1,1,)/16
c(5,4,1,1,1,1)/16
1:8
seq(8)
2:7
seq(2)
seq(2,7)
c(1,"a")
sample(1:8,4)
sample(1:8,4,replace=F)
sample(1:8,4,r=F)
sample(1:8,4,r=F)
?sample
sample(1:8,4,r=1)
sample(1:8,4,r=3)
sample(1:8,4,rep=3)
sample(1:8,4,rep=T)
sample(1:8,4,rep=T)
sample(1:8,4,rep=F)
sample(1:8,4,rep=F)
sample(1:8,4,rep=F)
sample(1:8,4,rep=F)
sample(1:8,4,rep=F)
sample(1:8,4,rep=F)
sample(1:8,4,rep=F)
list(1)
list(x=1,y="2",z=c(1,2,3))
$z
$x
matrix(1:4)
matrix(1:4,)
?matrix
matrix(1:4,nc=2)
matrix(1:4,n=2)
matrix(1:4,nc=2)
data.frame(c(1,2,3),c("a","b","c"))
is.na(3)
as.factor(1,2,3,3)
as.factor(c(1,2,3,2,2,5))
dd=data.frame(c(1,2,3),c("a","b","c"))
dd
dd[1]
dd[2]
dd[,2]
dd[2,]
dd[3,]
dd[,3]
dd[,2]
dd[2]
dd[1,2]
dd[1,1:2]
dd[1,]
dd=data.frame(h,t); h=c(1,2,3); t=c("a","b","c"))
h=c(1,2,3); t=c("a","b","c"))
h=c(1,2,3);
t=c("a","b","c")
dd=data.frame(h,t)
dd$f
dd$t
dd[h>1]
dd[h>1,]
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrameSubset=dataFrame[>188,,]
dataFrameSubset=dataFrame[heightsCM>188,,]
mean(dataFrameSubset$weightsK)
dataFrameSubset=RcAUCHY(100)
dataFrameSubset=RCauchy(100)
dataFrameSubset=rCauchy(100)
?rCauchy
?rCauchi
??rCauchy
import stats::cauchy
?load
?import
??import
?library
library(Cauchy)
library(stats::Cauchy)
install.packages("stats")
help.search("Cauchy")
?stats::Cauchy
library stats::Cauchy
library ("stats::Cauchy")
library ("stats::Cauchy")
rcauchy(100)
dataFrameSubset
cauchyValues=rcauchy(100)
set.seed(41)
cauchyValues=rcauchy(100)
set.seed(415)
sample(cauchyValues,10,r=t)
sample(cauchyValues,10,r=t)
sample(cauchyValues,10,r=T)
download.file(fileUrl,destfile="cameras.csv")
fileUrl = 'https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD'
download.file(fileUrl,destfile="cameras.csv")
fileUrl <- 'https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD'
download.file(fileUrl,destfile="cameras.csv")
fileUrl <- 'http://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD'
download.file(fileUrl,destfile="cameras.csv")
read.csv("cameras.csv")
library
??library
install.packages("xml")
install.packages("xml",lib="/home/Software/R")
install.packages("xml",lib="/home/Software/R")
install.packages("XML",lib="/home/Software/R")
install.packages("XML")
library(XML)
library()
load.packages("XML")
install.packages("XML",lib="/usr/local/lib/R/site-library")
exit
q()
install.packages("XML",lib="/usr/local/lib/R/site-library")
load.packages("XML")
library(XML)
library(xml)
q()
install.packages("XML")
library(lib = .Library)
library(lib = .Library)
library(lib = .Library)
library()
library(XML, lib = .Library)
library(XML)
savehistory("~/Documents/R/coursera/history1.Rhistory")
